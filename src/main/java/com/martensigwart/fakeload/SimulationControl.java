package com.martensigwart.fakeload;

import com.sun.management.OperatingSystemMXBean;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.management.ManagementFactory;
import java.util.Collections;
import java.util.List;

/**
 * This class acts as the controlling entity of the simulation infrastructure.
 *
 * When the load simulation infrastructure is currently active this class runs as a separate thread to monitor the
 * actual load generated by the simulator threads. Whenever a significant deviation between target and actual load is
 * detected, the class adjusts the load slightly in the direction of target. This way the load generated by the
 * simulation actually reaches the desired level.
 *
 * The {@code SimulationControl} retrieves all load changes via a shared instance of type
 * {@link SystemLoad}. These changes are then propagated to the respective simulator threads.
 *
 * @author Marten Sigwart
 * @since 1.8
 */
public final class SimulationControl implements Runnable {

    private static final Logger log = LoggerFactory.getLogger(SimulationControl.class);
    private static final OperatingSystemMXBean operatingSystem = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();
    private static final int SLEEP_PERIOD = 2000;


    private final SystemLoad systemLoad;
    private final List<CpuSimulator> cpuSimulators;
    private final MemorySimulator memorySimulator;
    private final Object lock;

    SimulationControl(List<CpuSimulator> cpuSimulators, MemorySimulator memorySimulator) {
        this.systemLoad = new SystemLoad();
        this.cpuSimulators = Collections.unmodifiableList(cpuSimulators);
        this.memorySimulator = memorySimulator;
        this.lock = new Object();
    }


    @Override
    public void run() {
        log.trace("Started");

        boolean running = true;
        long lastCpu = 0L;
        while(running) {
            try {
                synchronized (lock) {
                    while (systemLoad.getCpu() == 0) {
                        log.trace("SimulationControl - Waiting...");
                        lock.wait();
                        log.trace("SimulationControl - Woke Up");
                    }
                }

                long actualCpu = (long)(operatingSystem.getProcessCpuLoad() * 100);
                if (Math.abs(lastCpu-actualCpu) > 5) {
                    lastCpu = actualCpu;
                } else {
                    //TODO increase or decrease CPU accordingly
                }
                Thread.sleep(SLEEP_PERIOD);
            } catch (InterruptedException e) {
                log.warn("SimulationControl was interrupted");
                running = false;
            }
        }
    }


    public void increaseSystemLoadBy(FakeLoad load) throws MaximumLoadExceededException {
        systemLoad.increaseBy(load);

        for (CpuSimulator cpuSim: cpuSimulators) {
            cpuSim.setLoad(systemLoad.getCpu());
        }

        synchronized (lock) {
            lock.notify();
        }

        memorySimulator.setLoad(systemLoad.getMemory());
        //TODO propagate changes to simulators
    }

    public void decreaseSystemLoadBy(FakeLoad load) {
        systemLoad.decreaseBy(load);

        for (CpuSimulator cpuSim: cpuSimulators) {
            cpuSim.setLoad(systemLoad.getCpu());
        }
        memorySimulator.setLoad(systemLoad.getMemory());
        // TODO propagate changes to simulators
    }
}
